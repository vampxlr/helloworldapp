//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Freelance.AuditApp.AuditConnection),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsf3569fdbaad3fa7fffb06c800ebc5e1dca1ff83e66d754f1a1879f17a8694772))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsf3569fdbaad3fa7fffb06c800ebc5e1dca1ff83e66d754f1a1879f17a8694772 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "f3569fdbaad3fa7fffb06c800ebc5e1dca1ff83e66d754f1a1879f17a8694772"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "AuditStoreContainer.UserProjects")
            {
                return GetView0();
            }

            if (extentName == "AuditStoreContainer.Users")
            {
                return GetView1();
            }

            if (extentName == "AuditStoreContainer.AspectItems")
            {
                return GetView2();
            }

            if (extentName == "AuditStoreContainer.ProjectAspects")
            {
                return GetView3();
            }

            if (extentName == "AuditStoreContainer.Projects")
            {
                return GetView4();
            }

            if (extentName == "AuditConnection.UserProjects")
            {
                return GetView5();
            }

            if (extentName == "AuditConnection.Users")
            {
                return GetView6();
            }

            if (extentName == "AuditConnection.AspectItems")
            {
                return GetView7();
            }

            if (extentName == "AuditConnection.ProjectAspects")
            {
                return GetView8();
            }

            if (extentName == "AuditConnection.Projects")
            {
                return GetView9();
            }

            if (extentName == "AuditStoreContainer.Actions")
            {
                return GetView10();
            }

            if (extentName == "AuditConnection.Actions")
            {
                return GetView11();
            }

            if (extentName == "AuditStoreContainer.Results")
            {
                return GetView12();
            }

            if (extentName == "AuditConnection.Results")
            {
                return GetView13();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.UserProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserProjects
        [Audit.Store.UserProjects](T1.UserProjects_UserProjectId, T1.UserProjects_ProjectId, T1.UserProjects_UserId)
    FROM (
        SELECT 
            T.UserProjectId AS UserProjects_UserProjectId, 
            T.ProjectId AS UserProjects_ProjectId, 
            T.UserId AS UserProjects_UserId, 
            True AS _from0
        FROM AuditConnection.UserProjects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Audit.Store.Users](T1.Users_UserId, T1.Users_Username, T1.Users_UserPassword, T1.Users_UserRole)
    FROM (
        SELECT 
            T.UserId AS Users_UserId, 
            T.Username AS Users_Username, 
            T.UserPassword AS Users_UserPassword, 
            T.UserRole AS Users_UserRole, 
            True AS _from0
        FROM AuditConnection.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.AspectItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspectItems
        [Audit.Store.AspectItems](T1.AspectItems_AspectItemsID, T1.AspectItems_ProjectAspectID, T1.AspectItems_AspectItem1)
    FROM (
        SELECT 
            T.AspectItemsID AS AspectItems_AspectItemsID, 
            T.ProjectAspectID AS AspectItems_ProjectAspectID, 
            T.AspectItem1 AS AspectItems_AspectItem1, 
            True AS _from0
        FROM AuditConnection.AspectItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.ProjectAspects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectAspects
        [Audit.Store.ProjectAspects](T1.ProjectAspects_ProjectAspectsID, T1.ProjectAspects_ProjectID, T1.ProjectAspects_Aspect)
    FROM (
        SELECT 
            T.ProjectAspectsID AS ProjectAspects_ProjectAspectsID, 
            T.ProjectID AS ProjectAspects_ProjectID, 
            T.Aspect AS ProjectAspects_Aspect, 
            True AS _from0
        FROM AuditConnection.ProjectAspects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [Audit.Store.Projects](T1.Projects_ProjectId, T1.Projects_ProjectName, T1.Projects_CreatedBy, T1.Projects_RosterWork, T1.Projects_Location, T1.Projects_ProjectNumber, T1.Projects_RosterBreak, T1.Projects_StartDate, T1.Projects_Duration)
    FROM (
        SELECT 
            T.ProjectId AS Projects_ProjectId, 
            T.ProjectName AS Projects_ProjectName, 
            T.CreatedBy AS Projects_CreatedBy, 
            T.RosterWork AS Projects_RosterWork, 
            T.Location AS Projects_Location, 
            T.ProjectNumber AS Projects_ProjectNumber, 
            T.RosterBreak AS Projects_RosterBreak, 
            T.StartDate AS Projects_StartDate, 
            T.Duration AS Projects_Duration, 
            True AS _from0
        FROM AuditConnection.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.UserProjects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserProjects
        [Audit.UserProject](T1.UserProject_UserProjectId, T1.UserProject_ProjectId, T1.UserProject_UserId)
    FROM (
        SELECT 
            T.UserProjectId AS UserProject_UserProjectId, 
            T.ProjectId AS UserProject_ProjectId, 
            T.UserId AS UserProject_UserId, 
            True AS _from0
        FROM AuditStoreContainer.UserProjects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Audit.User](T1.User_UserId, T1.User_Username, T1.User_UserPassword, T1.User_UserRole)
    FROM (
        SELECT 
            T.UserId AS User_UserId, 
            T.Username AS User_Username, 
            T.UserPassword AS User_UserPassword, 
            T.UserRole AS User_UserRole, 
            True AS _from0
        FROM AuditStoreContainer.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.AspectItems.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AspectItems
        [Audit.AspectItem](T1.AspectItem_AspectItemsID, T1.AspectItem_ProjectAspectID, T1.AspectItem_AspectItem1)
    FROM (
        SELECT 
            T.AspectItemsID AS AspectItem_AspectItemsID, 
            T.ProjectAspectID AS AspectItem_ProjectAspectID, 
            T.AspectItem1 AS AspectItem_AspectItem1, 
            True AS _from0
        FROM AuditStoreContainer.AspectItems AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.ProjectAspects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProjectAspects
        [Audit.ProjectAspect](T1.ProjectAspect_ProjectAspectsID, T1.ProjectAspect_ProjectID, T1.ProjectAspect_Aspect)
    FROM (
        SELECT 
            T.ProjectAspectsID AS ProjectAspect_ProjectAspectsID, 
            T.ProjectID AS ProjectAspect_ProjectID, 
            T.Aspect AS ProjectAspect_Aspect, 
            True AS _from0
        FROM AuditStoreContainer.ProjectAspects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.Projects.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Projects
        [Audit.Project](T1.Project_ProjectId, T1.Project_ProjectName, T1.Project_CreatedBy, T1.Project_RosterWork, T1.Project_Location, T1.Project_ProjectNumber, T1.Project_RosterBreak, T1.Project_StartDate, T1.Project_Duration)
    FROM (
        SELECT 
            T.ProjectId AS Project_ProjectId, 
            T.ProjectName AS Project_ProjectName, 
            T.CreatedBy AS Project_CreatedBy, 
            T.RosterWork AS Project_RosterWork, 
            T.Location AS Project_Location, 
            T.ProjectNumber AS Project_ProjectNumber, 
            T.RosterBreak AS Project_RosterBreak, 
            T.StartDate AS Project_StartDate, 
            T.Duration AS Project_Duration, 
            True AS _from0
        FROM AuditStoreContainer.Projects AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.Actions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Actions
        [Audit.Store.Actions](T1.Actions_ActionId, T1.Actions_ProjectId, T1.Actions_CreatedBy, T1.Actions_Closed, T1.Actions_Priority, T1.Actions_DueDate, T1.Actions_CreatedDate, T1.Actions_UploadedFile, T1.Actions_ActionDescription, T1.Actions_ClosedReason, T1.Actions_ClosedDate, T1.Actions_ClosedFile, T1.Actions_RaisedBy)
    FROM (
        SELECT 
            T.ActionId AS Actions_ActionId, 
            T.ProjectId AS Actions_ProjectId, 
            T.CreatedBy AS Actions_CreatedBy, 
            T.Closed AS Actions_Closed, 
            T.Priority AS Actions_Priority, 
            T.DueDate AS Actions_DueDate, 
            T.CreatedDate AS Actions_CreatedDate, 
            T.UploadedFile AS Actions_UploadedFile, 
            T.ActionDescription AS Actions_ActionDescription, 
            T.ClosedReason AS Actions_ClosedReason, 
            T.ClosedDate AS Actions_ClosedDate, 
            T.ClosedFile AS Actions_ClosedFile, 
            T.RaisedBy AS Actions_RaisedBy, 
            True AS _from0
        FROM AuditConnection.Actions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.Actions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Actions
        [Audit.Action](T1.Action_ActionId, T1.Action_ProjectId, T1.Action_CreatedBy, T1.Action_Closed, T1.Action_Priority, T1.Action_DueDate, T1.Action_CreatedDate, T1.Action_UploadedFile, T1.Action_ActionDescription, T1.Action_ClosedReason, T1.Action_ClosedDate, T1.Action_ClosedFile, T1.Action_RaisedBy)
    FROM (
        SELECT 
            T.ActionId AS Action_ActionId, 
            T.ProjectId AS Action_ProjectId, 
            T.CreatedBy AS Action_CreatedBy, 
            T.Closed AS Action_Closed, 
            T.Priority AS Action_Priority, 
            T.DueDate AS Action_DueDate, 
            T.CreatedDate AS Action_CreatedDate, 
            T.UploadedFile AS Action_UploadedFile, 
            T.ActionDescription AS Action_ActionDescription, 
            T.ClosedReason AS Action_ClosedReason, 
            T.ClosedDate AS Action_ClosedDate, 
            T.ClosedFile AS Action_ClosedFile, 
            T.RaisedBy AS Action_RaisedBy, 
            True AS _from0
        FROM AuditStoreContainer.Actions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditStoreContainer.Results.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Results
        [Audit.Store.Results](T1.Results_ResultID, T1.Results_ProjectId, T1.Results_AspectItem, T1.Results_ObservationalComment, T1.Results_Satisfactory, T1.Results_ConductedBy, T1.Results_Auditees, T1.Results_WeatherObservations, T1.Results_AuditGuid, T1.Results_DateRecorded)
    FROM (
        SELECT 
            T.ResultID AS Results_ResultID, 
            T.ProjectId AS Results_ProjectId, 
            T.AspectItem AS Results_AspectItem, 
            T.ObservationalComment AS Results_ObservationalComment, 
            T.Satisfactory AS Results_Satisfactory, 
            T.ConductedBy AS Results_ConductedBy, 
            T.Auditees AS Results_Auditees, 
            T.WeatherObservations AS Results_WeatherObservations, 
            T.AuditGuid AS Results_AuditGuid, 
            T.DateRecorded AS Results_DateRecorded, 
            True AS _from0
        FROM AuditConnection.Results AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AuditConnection.Results.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Results
        [Audit.Result](T1.Result_ResultID, T1.Result_ProjectId, T1.Result_AspectItem, T1.Result_ObservationalComment, T1.Result_Satisfactory, T1.Result_ConductedBy, T1.Result_Auditees, T1.Result_WeatherObservations, T1.Result_AuditGuid, T1.Result_DateRecorded)
    FROM (
        SELECT 
            T.ResultID AS Result_ResultID, 
            T.ProjectId AS Result_ProjectId, 
            T.AspectItem AS Result_AspectItem, 
            T.ObservationalComment AS Result_ObservationalComment, 
            T.Satisfactory AS Result_Satisfactory, 
            T.ConductedBy AS Result_ConductedBy, 
            T.Auditees AS Result_Auditees, 
            T.WeatherObservations AS Result_WeatherObservations, 
            T.AuditGuid AS Result_AuditGuid, 
            T.DateRecorded AS Result_DateRecorded, 
            True AS _from0
        FROM AuditStoreContainer.Results AS T
    ) AS T1");
        }
    }
}
